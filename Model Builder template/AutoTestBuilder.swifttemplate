<%
func defaultValue(for variable: Variable, of type: Type) -> Variable? {
    return type.staticVariables.first { $0.name == "\(variable.name)TestDefault" }
}

func typeName(for variable: Variable) -> String {
	return variable.type?.name ?? variable.typeName.name
}

func stripDots(for string: String) -> String {
	return string.replacingOccurrences(of: ".", with: "")
}
-%>
<%_ for type in types.all { -%>
<%_ guard type.implements["AutoTestBuilder"] != nil else { continue } -%>
// sourcery:inline:<%= type.name %>.AutoTestBuilder
<%_ let variablesNonStaticNonComputed = type.variables.filter { !$0.isStatic && !$0.isComputed } -%>
// GENERATED CODE - changes done will be overwritten
final class <%= stripDots(for: type.name) %>Builder {
	<%_ for variable in variablesNonStaticNonComputed { -%>
		<%_ var variableTypeName: String = typeName(for: variable) -%>
		<%_ if let defaultVal = defaultValue(for: variable, of: type) { -%>
	private var <%= variable.name %>: <%= variableTypeName %>? = <%= defaultVal.defaultValue! %>
		<%_ } else { -%>
	private var <%= variable.name %>: <%= variableTypeName %>?	
		<%_ } -%>
	<%_ } -%>

	<%_ for variable in variablesNonStaticNonComputed { -%>
		<%_ var variableTypeName: String = typeName(for: variable) -%>
	func with(<%= variable.name %>: <%= variableTypeName %>) -> <%= stripDots(for: type.name) %>Builder {
		self.<%= variable.name %> = <%= variable.name %>
		return self
	}
	<%_ } -%>

	func build() throws -> <%= type.name %> {
	<%_ for variable in variablesNonStaticNonComputed { -%>
		guard let <%= variable.name %> = self.<%= variable.name %> else { throw AutoTestBuilderError.missingValue("<%= variable.name %>") }
	<%_ } -%>
		return <%= type.name %>(
		<%_ for i in 0..<variablesNonStaticNonComputed.count { -%>
			<%_ let variable = variablesNonStaticNonComputed[i] -%>
			<%_ let commaString = i == variablesNonStaticNonComputed.count-1 ? "" : "," -%>
			<%= variable.name %>:<%= variable.name %><%= commaString %>
		<%_ } -%>
		)
	}

}
// sourcery:end
<%_ } -%>